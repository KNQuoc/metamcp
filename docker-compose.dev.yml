services:
  app:
    container_name: metamcp-dev
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    ports:
      - "12008:12008"  # Frontend
    environment:
      # Postgres connection details
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-metamcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-m3t4mcp}
      POSTGRES_DB: ${POSTGRES_DB:-metamcp_db}
      
      # Database configuration (composed from above vars)
      DATABASE_URL: postgresql://${POSTGRES_USER:-metamcp_user}:${POSTGRES_PASSWORD:-m3t4mcp}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-metamcp_db}
      
      # Application URL configuration
      APP_URL: ${APP_URL:-http://localhost:12008}
      NEXT_PUBLIC_APP_URL: ${APP_URL:-http://localhost:12008}
      
      # Auth configuration
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-your-super-secret-key-change-this-in-production}
      
      # Docker networking fix
      TRANSFORM_LOCALHOST_TO_DOCKER_INTERNAL: ${TRANSFORM_LOCALHOST_TO_DOCKER_INTERNAL:-true}
      
      # Docker socket access
      DOCKER_HOST: unix:///var/run/docker.sock
      
      # Development environment
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      # Mount Docker socket to allow container management
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount source code for hot reload, but exclude node_modules
      - .:/app
      # Exclude node_modules from volume mount to use container's
      - /app/node_modules
      - /app/apps/frontend/node_modules
      - /app/apps/backend/node_modules
      - /app/packages/*/node_modules
      # Exclude build artifacts
      - /app/apps/frontend/.next
      - /app/apps/backend/dist
      # Ensure pnpm store is preserved
      - /app/.pnpm-store
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - metamcp-network
      - metamcp-internal
    # Use init system for proper signal handling
    init: true

  postgres:
    image: postgres:16-alpine
    container_name: metamcp-pg-dev
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-metamcp_db}
      POSTGRES_USER: ${POSTGRES_USER:-metamcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-m3t4mcp}
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-9433}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-metamcp_user} -d ${POSTGRES_DB:-metamcp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - metamcp-network

volumes:
  postgres_data_dev:
    driver: local

networks:
  metamcp-network:
    driver: bridge
  metamcp-internal:
    driver: bridge 