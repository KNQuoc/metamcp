# Development Dockerfile with hot reload support
FROM ghcr.io/astral-sh/uv:debian AS base

# Install Node.js and pnpm
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g pnpm@10.12.0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Docker CLI for container management
RUN apt-get update && apt-get install -y \
    docker.io \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Development stage
FROM base AS dev
WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV=development

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY turbo.json ./

# Copy package.json files from all workspaces
COPY apps/frontend/package.json ./apps/frontend/
COPY apps/backend/package.json ./apps/backend/
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/trpc/package.json ./packages/trpc/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY packages/zod-types/package.json ./packages/zod-types/

# Install all dependencies (including dev dependencies)
RUN pnpm install

# Copy source code (will be overridden by volume mount in dev)
COPY . .

# Expose ports
EXPOSE 12008 12009

# Health check for development
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:12008/health || exit 1

# Copy entrypoint script
COPY docker-entrypoint-dev.sh ./
RUN chmod +x docker-entrypoint-dev.sh && \
    ls -la docker-entrypoint-dev.sh

# Use the development entrypoint script
CMD ["./docker-entrypoint-dev.sh"] 